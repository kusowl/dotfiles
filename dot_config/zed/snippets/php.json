{
  "echo": {
    "prefix": "echo",
    "body": "echo ${1:$variable};$0",
    "description": "Echo statement"
  },
  "var_dump": {
    "prefix": "dump",
    "body": "var_dump(${1:$variable});$0",
    "description": "Variable dump"
  },
  "print_r": {
    "prefix": "pr",
    "body": "print_r(${1:$variable});$0",
    "description": "Print readable"
  },
  "die_dump": {
    "prefix": "dd",
    "body": "var_dump(${1:$variable}); die();$0",
    "description": "Dump and die"
  },
  "foreach": {
    "prefix": "fore",
    "body": [
      "foreach (${1:$array} as ${2:$key} => ${3:$value}) {",
      "\t${0:// code}",
      "}"
    ],
    "description": "Foreach loop with key and value"
  },
  "foreach_simple": {
    "prefix": "foreach",
    "body": ["foreach (${1:$array} as ${2:$item}) {", "\t${0:// code}", "}"],
    "description": "Simple foreach loop"
  },
  "for": {
    "prefix": "for",
    "body": [
      "for (${1:$i} = ${2:0}; ${1:$i} < ${3:count}; ${1:$i}++) {",
      "\t${0:// code}",
      "}"
    ],
    "description": "For loop"
  },
  "while": {
    "prefix": "while",
    "body": ["while (${1:condition}) {", "\t${0:// code}", "}"],
    "description": "While loop"
  },
  "if": {
    "prefix": "if",
    "body": ["if (${1:condition}) {", "\t${0:// code}", "}"],
    "description": "If statement"
  },
  "ifelse": {
    "prefix": "ifelse",
    "body": [
      "if (${1:condition}) {",
      "\t${2:// true code}",
      "} else {",
      "\t${0:// false code}",
      "}"
    ],
    "description": "If-else statement"
  },
  "elseif": {
    "prefix": "elseif",
    "body": [
      "if (${1:condition}) {",
      "\t${2:// code}",
      "} elseif (${3:condition}) {",
      "\t${4:// code}",
      "} else {",
      "\t${0:// code}",
      "}"
    ],
    "description": "If-elseif-else statement"
  },
  "switch": {
    "prefix": "switch",
    "body": [
      "switch (${1:$variable}) {",
      "\tcase ${2:'value1'}:",
      "\t\t${3:// code}",
      "\t\tbreak;",
      "\tcase ${4:'value2'}:",
      "\t\t${5:// code}",
      "\t\tbreak;",
      "\tdefault:",
      "\t\t${0:// code}",
      "}"
    ],
    "description": "Switch statement"
  },
  "try_catch": {
    "prefix": "try",
    "body": [
      "try {",
      "\t${1:// code}",
      "} catch (${2:Exception} ${3:$e}) {",
      "\t${0:// handle exception}",
      "}"
    ],
    "description": "Try-catch block"
  },
  "try_catch_finally": {
    "prefix": "tryf",
    "body": [
      "try {",
      "\t${1:// code}",
      "} catch (${2:Exception} ${3:$e}) {",
      "\t${4:// handle exception}",
      "} finally {",
      "\t${0:// cleanup code}",
      "}"
    ],
    "description": "Try-catch-finally block"
  },
  "function": {
    "prefix": "fun",
    "body": [
      "function ${1:functionName}(${2:$parameters}) {",
      "\t${0:// code}",
      "}"
    ],
    "description": "Function declaration"
  },
  "function_typed": {
    "prefix": "funt",
    "body": [
      "function ${1:functionName}(${2:string} ${3:$parameter}): ${4:string} {",
      "\t${0:// code}",
      "}"
    ],
    "description": "Typed function declaration"
  },
  "anonymous_function": {
    "prefix": "fn",
    "body": ["function(${1:$parameters}) {", "\t${0:// code}", "}"],
    "description": "Anonymous function"
  },
  "arrow_function": {
    "prefix": "afn",
    "body": "fn(${1:$parameters}) => ${0:$expression}",
    "description": "Arrow function (PHP 7.4+)"
  },
  "class": {
    "prefix": "class",
    "body": ["class ${1:ClassName} {", "\t${0:// class body}", "}"],
    "description": "Class declaration"
  },
  "class_extends": {
    "prefix": "classe",
    "body": [
      "class ${1:ClassName} extends ${2:ParentClass} {",
      "\t${0:// class body}",
      "}"
    ],
    "description": "Class with inheritance"
  },
  "class_implements": {
    "prefix": "classi",
    "body": [
      "class ${1:ClassName} implements ${2:Interface} {",
      "\t${0:// class body}",
      "}"
    ],
    "description": "Class implementing interface"
  },
  "interface": {
    "prefix": "interface",
    "body": ["interface ${1:InterfaceName} {", "\t${0:// interface body}", "}"],
    "description": "Interface declaration"
  },
  "trait": {
    "prefix": "trait",
    "body": ["trait ${1:TraitName} {", "\t${0:// trait body}", "}"],
    "description": "Trait declaration"
  },
  "constructor": {
    "prefix": "construct",
    "body": [
      "public function __construct(${1:$parameters}) {",
      "\t${0:// constructor code}",
      "}"
    ],
    "description": "Constructor method"
  },
  "constructor_property_promotion": {
    "prefix": "constructpp",
    "body": [
      "public function __construct(",
      "\tpublic ${1:string} ${2:$property},",
      ") {",
      "\t${0:// constructor code}",
      "}"
    ],
    "description": "Constructor with property promotion (PHP 8.0+)"
  },
  "public_method": {
    "prefix": "pubm",
    "body": [
      "public function ${1:methodName}(${2:$parameters}): ${3:mixed} {",
      "\t${0:// method code}",
      "}"
    ],
    "description": "Public method"
  },
  "private_method": {
    "prefix": "prim",
    "body": [
      "private function ${1:methodName}(${2:$parameters}): ${3:mixed} {",
      "\t${0:// method code}",
      "}"
    ],
    "description": "Private method"
  },
  "protected_method": {
    "prefix": "prom",
    "body": [
      "protected function ${1:methodName}(${2:$parameters}): ${3:mixed} {",
      "\t${0:// method code}",
      "}"
    ],
    "description": "Protected method"
  },
  "static_method": {
    "prefix": "stm",
    "body": [
      "public static function ${1:methodName}(${2:$parameters}): ${3:mixed} {",
      "\t${0:// method code}",
      "}"
    ],
    "description": "Static method"
  },
  "public_property": {
    "prefix": "pubp",
    "body": "public ${1:string} ${2:$property};$0",
    "description": "Public property"
  },
  "private_property": {
    "prefix": "prip",
    "body": "private ${1:string} ${2:$property};$0",
    "description": "Private property"
  },
  "protected_property": {
    "prefix": "prop",
    "body": "protected ${1:string} ${2:$property};$0",
    "description": "Protected property"
  },
  "const": {
    "prefix": "const",
    "body": "const ${1:CONSTANT_NAME} = ${2:'value'};$0",
    "description": "Class constant"
  },
  "namespace": {
    "prefix": "ns",
    "body": "namespace ${1:App\\\\${2:Namespace}};$0",
    "description": "Namespace declaration"
  },
  "use": {
    "prefix": "use",
    "body": "use ${1:Fully\\\\Qualified\\\\ClassName};$0",
    "description": "Use statement"
  },
  "use_alias": {
    "prefix": "useas",
    "body": "use ${1:Fully\\\\Qualified\\\\ClassName} as ${2:Alias};$0",
    "description": "Use statement with alias"
  },
  "require_once": {
    "prefix": "req",
    "body": "require_once '${1:filename.php}';$0",
    "description": "Require once"
  },
  "include_once": {
    "prefix": "inc",
    "body": "include_once '${1:filename.php}';$0",
    "description": "Include once"
  },
  "array": {
    "prefix": "arr",
    "body": ["[", "\t'${1:key}' => '${2:value}',", "\t${0}", "]"],
    "description": "Array literal"
  },
  "array_merge": {
    "prefix": "am",
    "body": "array_merge(${1:$array1}, ${2:$array2})$0",
    "description": "Array merge"
  },
  "isset": {
    "prefix": "isset",
    "body": "isset(${1:$variable})$0",
    "description": "Isset check"
  },
  "empty": {
    "prefix": "empty",
    "body": "empty(${1:$variable})$0",
    "description": "Empty check"
  },
  "null_coalesce": {
    "prefix": "nc",
    "body": "${1:$variable} ?? ${2:'default'}$0",
    "description": "Null coalescing operator"
  },
  "null_coalesce_assignment": {
    "prefix": "nca",
    "body": "${1:$variable} ??= ${2:'default'};$0",
    "description": "Null coalescing assignment (PHP 7.4+)"
  },
  "spaceship": {
    "prefix": "spaceship",
    "body": "${1:$a} <=> ${2:$b}$0",
    "description": "Spaceship operator"
  },
  "return": {
    "prefix": "ret",
    "body": "return ${1:$value};$0",
    "description": "Return statement"
  },
  "return_type": {
    "prefix": "rett",
    "body": "return ${1:$value}; // @return ${2:string}$0",
    "description": "Return with type comment"
  },
  "phpunit_test": {
    "prefix": "test",
    "body": [
      "public function test${1:SomethingWorks}(): void {",
      "\t${2:// Arrange}",
      "\t",
      "\t${3:// Act}",
      "\t",
      "\t${4:// Assert}",
      "\t$this->assertTrue(${0:true});",
      "}"
    ],
    "description": "PHPUnit test method"
  },
  "phpunit_setup": {
    "prefix": "setup",
    "body": [
      "protected function setUp(): void {",
      "\tparent::setUp();",
      "\t${0:// setup code}",
      "}"
    ],
    "description": "PHPUnit setUp method"
  },
  "doc_comment": {
    "prefix": "doc",
    "body": [
      "/**",
      " * ${1:Description}",
      " *",
      " * @param ${2:type} ${3:$parameter} ${4:Description}",
      " * @return ${5:type} ${6:Description}",
      " * @throws ${7:Exception} ${8:Description}",
      " */$0"
    ],
    "description": "PHPDoc comment block"
  },
  "getter": {
    "prefix": "get",
    "body": [
      "public function get${1/(.*)/${1:/capitalize}/}(): ${2:string} {",
      "\treturn $this->${1:property};",
      "}$0"
    ],
    "description": "Getter method"
  },
  "setter": {
    "prefix": "set",
    "body": [
      "public function set${1/(.*)/${1:/capitalize}/}(${2:string} ${3:$${1:property}}): self {",
      "\t$this->${1:property} = ${3:$${1:property}};",
      "\treturn $this;",
      "}$0"
    ],
    "description": "Setter method"
  },
  "match": {
    "prefix": "match",
    "body": [
      "match (${1:$variable}) {",
      "\t${2:'value1'} => ${3:'result1'},",
      "\t${4:'value2'} => ${5:'result2'},",
      "\tdefault => ${0:'default_result'},",
      "}"
    ],
    "description": "Match expression (PHP 8.0+)"
  },
  "readonly_property": {
    "prefix": "readonly",
    "body": "public readonly ${1:string} ${2:$property};$0",
    "description": "Readonly property (PHP 8.1+)"
  },
  "enum": {
    "prefix": "enum",
    "body": [
      "enum ${1:EnumName}: ${2:string} {",
      "\tcase ${3:CASE1} = '${4:value1}';",
      "\tcase ${5:CASE2} = '${6:value2}';$0",
      "}"
    ],
    "description": "Enum declaration (PHP 8.1+)"
  }
}
